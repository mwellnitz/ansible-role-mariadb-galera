---

- name: Import mariadb repository key
  apt_key: keyserver=keyserver.ubuntu.com id={{item}}
  with_items:
    - "0xcbcb082a1bb943db"
    - "0xF1656F24C74CD1D8"
  notify: update apt
  when: ansible_os_family == 'Debian'
  tags:
    - apt_key

- name: Configure software repository (debian/ubuntu)
  template: src=mariadb.list.j2 dest=/etc/apt/sources.list.d/mariadb.list
  notify: update apt
  when: ansible_os_family == 'Debian'
  tags:
    - apt_repo

- name: Configure software repository (centos/redhat)
  template: src=mariadb.repo.j2 dest=/etc/yum.repos.d/mariadb.repo
  when: ansible_os_family == 'RedHat'
  tags:
    - yum_repo

- name: Flush handlers
  meta: flush_handlers

- name: Install MariaDB Server (debian/ubuntu)
  apt: name={{item}} state=present
  with_items: "{{ mariadb_apt_packages | from_yaml }}"
  when: ansible_os_family == 'Debian'
  tags:
    - apt_pkg

- name: Install MariaDB Server (centos/redhat)
  yum: name={{item}} state=present
  with_items:
    - mariadb-server
    - mariadb
    - galera
    - "{% if mariadb_install_xtrabackup|bool %} percona-xtrabackup {% endif %}"
    - "{% if mariadb_install_backupninja|bool %} backupninja {% endif %}"
  when: ansible_os_family == 'RedHat'
  tags:
    - yum_pkg

- name: Template galera config file (when in a galera cluster)
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0600')}}"
  with_items:
    - { src: "galera.cnf.j2", dest: "{{mariadb_conf_dir}}/galera.cnf", mode: "0644" }
  when: galera_wsrep_cluster_name != ""
  tags:
    - galera
    - template
  register: galera_config_changed

- name: Template misc mariadb config files
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0600')}}"
  with_items: "{{ mariadb_misc_config_files | from_yaml }}"
  tags:
    - ssl_cnf
    - mysql-tuning
    - template
  register: misc_config_changed

- name: Template mariadb nrpe config
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0600')}}"
  with_items:
    - { src: "nrpe-mariadb.cfg.j2", dest: "{{nrpe_include_dir}}/role-mariadb.cfg", owner: "nrpe", group: "nrpe", mode: "0440" }
  when: mariadb_nrpe|bool
  tags:
    - nrpe

- name: Template instance-configurations
  template: src="mariadb_instance.j2" dest="{{mariadb_conf_dir}}/instance_{{item.name}}.cnf" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0644')}}"
  with_flattened:
    - "{{mariadb_instances}}"
  when: mariadb_multiple_instances|bool
  tags:
    - template

- name: Create backup directory
  file: state=directory path="{{mariadb_backup_root}}"
  when: mariadb_configure_xtrabackup|bool or mariadb_configure_backupninja|bool

- include_tasks: "mydumper.yml"
  when: mariadb_install_mydumper_binary|bool or mariadb_install_mydumper_package|bool

- include_tasks: "backupninja.yml"
  when: mariadb_configure_backupninja|bool

- include_tasks: "xtrabackup.yml"
  when: mariadb_configure_xtrabackup|bool

- name: Template ufw config for galera/mysql (ubuntu)
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0600')}}"
  with_items:
    - { src: "ufw-galera.j2", dest: "/etc/ufw/applications.d/galera", mode: "0644" }
  when: ansible_os_family == 'Debian'
  tags:
    - firewall
    - template

- name: Template firewalld config for galera/mysql (centos/redhat)
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0600')}}"
  with_items:
    - { src: "firewalld-galera.j2", dest: "/etc/firewalld/services/galera.xml", mode: "0644" }
  when: ansible_os_family == 'RedHat'
  tags:
    - firewall
    - template

- name: Allow galera cluster to communicate 1 (ubuntu)
  ufw: rule=allow name="galera" src="{{item}}/32"
  with_items:
    - "{{galera_cluster_nodes}}"
  when: ansible_os_family == 'Debian' and ufw_enabled|bool
  tags:
    - firewall

- name: Allow galera cluster to communicate 2 (ubuntu)
  ufw: rule=allow name="galera-udp" src="{{item}}/32"
  with_items:
    - "{{galera_cluster_nodes}}"
  when: ansible_os_family == 'Debian' and ufw_enabled|bool
  tags:
    - firewall

- name: Allow galera cluster to communicate (redhat)
  firewalld: service="galera" permanent=true state=enabled immediate=true
  when: ansible_os_family == 'RedHat' and firewalld_enabled|bool
  tags:
    - firewall

- name: Add Galera ports to mysqld_port_t selinux tag
  seport: ports="{{item.port}}" proto="{{item.proto|default('tcp')}}" setype="{{item.setype}}" state="{{item.state|default('present')}}"
  with_items:
    - { port: "4444", setype: "mysqld_port_t" }
    - { port: "4567", setype: "mysqld_port_t" }
    - { port: "4568", setype: "mysqld_port_t" }
    - { port: "4567", setype: "mysqld_port_t", proto: "udp" }
  when: ansible_os_family == 'RedHat' and ansible_selinux.status == 'enabled'
  tags:
    - selinux
    - seport

- name: Set selinux permissive mode for mysqld_t
  selinux_permissive: name=mysqld_t permissive=true
  when: ansible_os_family == 'RedHat' and ansible_selinux.status == 'enabled'
  tags:
    - selinux
    - sepermissive

- name: get database quorum size ( (cluster number of incoming addresses / 2) +1 )
  shell: "echo $((($(mysql <<< \"SHOW STATUS LIKE 'wsrep_incoming_addresses';\" | awk '{print $2}' | tail -n 1 | sed \"s/,/ /\"g |wc -w)/2)+1))"
  args: 
    executable: /bin/bash
  register: galera_quorum_size

- name: get database cluster status for this node
  shell: "mysql <<< \"SHOW STATUS LIKE 'wsrep_cluster_status';\" | awk '{print $2}'| tail -n 1"
  args: 
    executable: /bin/bash
  register: galera_wsrep_cluster_status

- name: get database cluster size for this node
  shell: "mysql <<< \"SHOW STATUS LIKE 'wsrep_cluster_size';\" | awk '{print $2}'| tail -n 1"
  args: 
    executable: /bin/bash
  register: galera_wsrep_cluster_size

- debug:
    msg: galera_wsrep_cluster_status={{ galera_wsrep_cluster_status }} galera_wsrep_cluster_size={{ galera_wsrep_cluster_size }}
  when: debug is defined and (debug|bool)

- name: stop mariadb if config changed (warning! this can take from one second to several hours according to your cluster)
  service: name=mariadb state=stopped
  when: (galera_config_changed.changed or misc_config_changed.changed) and
         galera_wsrep_cluster_status.stdout|lower == "primary" and galera_wsrep_cluster_size.stdout|int > galera_quorum_size.stdout|int

- name: test if first node does normal start
  service:  name=mariadb state=started
  when: 
        ((galera_current_node_name is defined and galera_current_node_name == (galera_cluster_nodes|from_yaml)[0] ) or
        ( ansible_hostname == (galera_cluster_nodes|from_yaml)[0] )) and
        ( galera_config_changed.changed or misc_config_changed.changed )
  register: firstnode_start_test
  ignore_errors: true

- debug: 
    msg: |
         firstnode_start_test={{ firstnode_start_test }} 
         galera_cluster_nodes[0]={{ (galera_cluster_nodes| from_yaml)[0] }}
         galera_config_changed.changed={{ galera_config_changed.changed }}
         misc_config_changed.changed={{ misc_config_changed.changed }}
         galera_current_node_name={{ galera_current_node_name }}
  when: debug is defined and (debug|bool)

- name: test if first node does initial start
  command: "/usr/bin/galera_new_cluster"
  become: true
  when: 
        ((galera_current_node_name is defined and galera_current_node_name == (galera_cluster_nodes|from_yaml)[0] ) or
        ( ansible_hostname == (galera_cluster_nodes|from_yaml)[0] )) and
        ( galera_config_changed.changed or misc_config_changed.changed ) and
        (firstnode_start_test.failed|bool)
  ignore_errors: true
  register: firstnode_initial_start_test

- name: start non_initial nodes
  service:  name=mariadb state=started
  when:
        ((galera_current_node_name is defined and galera_current_node_name != (galera_cluster_nodes|from_yaml)[0] ) or
        ( ansible_hostname != (galera_cluster_nodes|from_yaml)[0] )) and
        ( galera_config_changed.changed or misc_config_changed.changed )

